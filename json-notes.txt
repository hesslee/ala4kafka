show example of producing kafka message using librdkafka c library and JSON that can be cosumed by jdbc sink connector with table schema t1(c1 int, c2 varchr(20), c3 int) and column  c2 can have comma(",") in their value


#include <librdkafka/rdkafka.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* Define the table schema as a JSON object */
#define TABLE_SCHEMA "{\"name\": \"t1\", \"type\": \"struct\", \"fields\": [{\"name\": \"c1\", \"type\": \"int32\"}, {\"name\": \"c2\", \"type\": \"string\"}, {\"name\": \"c3\", \"type\": \"int32\"}]}"

/* Define the message payload as a JSON object */
#define PAYLOAD "{\"schema\": " TABLE_SCHEMA ", \"payload\": {\"c1\": 42, \"c2\": \"hello, world\", \"c3\": 99}}"

/* Define the message key as a JSON object */
#define KEY "{\"schema\": {\"name\": \"t1Key\", \"type\": \"struct\", \"fields\": [{\"name\": \"c1\", \"type\": \"int32\"}]}, \"payload\": {\"c1\": 42}}"

/* Define the topic name */
#define TOPIC "t1"

/* Define the bootstrap servers */
#define BOOTSTRAP_SERVERS "localhost:9092"

/* Define the delivery report callback function */
void dr_cb (rd_kafka_t *rk, const rd_kafka_message_t *rkmessage, void *opaque) {
    if (rkmessage->err) {
        fprintf(stderr, "Message delivery failed: %s\n", rd_kafka_err2str(rkmessage->err));
    } else {
        fprintf(stdout, "Message delivered to topic %s [%d] at offset %lld\n",
                rd_kafka_topic_name(rkmessage->rkt), rkmessage->partition, rkmessage->offset);
    }
}

int main (void) {
    /* Create a Kafka producer configuration */
    rd_kafka_conf_t *conf = rd_kafka_conf_new();

    /* Set the bootstrap servers */
    char errstr[512];
    if (rd_kafka_conf_set(conf, "bootstrap.servers", BOOTSTRAP_SERVERS, errstr, sizeof(errstr)) != RD_KAFKA_CONF_OK) {
        fprintf(stderr, "Failed to set bootstrap servers: %s\n", errstr);
        exit(1);
    }

    /* Set the delivery report callback */
    rd_kafka_conf_set_dr_msg_cb(conf, dr_cb);

    /* Create a Kafka producer instance */
    rd_kafka_t *rk = rd_kafka_new(RD_KAFKA_PRODUCER, conf, errstr, sizeof(errstr));
    if (!rk) {
        fprintf(stderr, "Failed to create Kafka producer: %s\n", errstr);
        exit(1);
    }

    /* Produce a message to the topic */
    rd_kafka_resp_err_t err = rd_kafka_producev(
        rk,
        RD_KAFKA_V_TOPIC(TOPIC),
        RD_KAFKA_V_MSGFLAGS(RD_KAFKA_MSG_F_COPY),
        RD_KAFKA_V_VALUE(PAYLOAD, strlen(PAYLOAD)),
        RD_KAFKA_V_KEY(KEY, strlen(KEY)),
        RD_KAFKA_V_END
    );

    if (err) {
        fprintf(stderr, "Failed to produce message: %s\n", rd_kafka_err2str(err));
        exit(1);
    }

    /* Wait for message delivery */
    rd_kafka_flush(rk, -1);

    /* Destroy the producer instance */
    rd_kafka_destroy(rk);

    return 0;
}
